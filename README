    Am implementat aplicatia de banking plecand de la clasa Bank, care se ocupa de preluarea datelor initiale din fisierele
de input precum utilizatori, exchange rates, si comenzi. Ne folosim de clasa UserRepo care stocheaza utilizatorii dar
si comenzi specifice pt utilizatori pentru a salva datele extrase din fisierele de input.
    Comenzile efective le am implementat cu ajutorul design patternului FACTORY, avand interfata Command cu metoda execute,
pe care am implementat-o dupa caz. In clasa CommandFactory se construia comanda in functie de ce input se primea pentru
ea. Pentru fiecare comanda a fost necesara crearea unei clase, pentru o buna structurare a codului, si pentru a
facilicta eventuala extindere a acestuia.
    Am implementat in pachetul "entities" toate clasele necesare aplicatiei precum user, card (unde se disting 2 tipuri
de card diferite), account(unde sunt tot 2 tipuri), exchangeRate, transaction. Una din clasele de baza ale aplicatiei
este clasa UserRepo care se ocupa de operatii specifice pe utilizatori, dar si de salvarea exchangeRate-urilor si a
tuturor utilizatorilor.
    Tranzactiile au fost implementate folosind design-patternul BUILDER, facand astfel usor de variat modul in care o
tranzactie arata, formatul lor putand sa difere radical. Pentru fiecare cont, am salvat actiunile identificate ca
tranzactii intr-un ArrayList de tranzactii, care e afisat daca e cazul (printTransactions).
    In clasa User, am salvat ca HashMap aliasurile pentru a face mai facila asocierea intre alias si ibanul contului
respectiv.
